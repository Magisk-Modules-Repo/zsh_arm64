#!/bin/zsh
# zed
#
# No other shell could do this.
# Edit small files with the command line editor.
# Use ^X^W to save, ^C to abort.
# Option -f: edit shell functions.  (Also if called as fned.)

setopt localoptions noksharrays

local var opts zed_file_name
# We do not want timeout while we are editing a file
integer TMOUT=0 okargs=1 fun bind
local -a expand

zparseopts -D -A opts f b x:
fun=$+opts[-f]
bind=$+opts[-b]
if [[ $opts[-x] == <-> ]]; then
  expand=(-x $opts[-x])
elif (( $+opts[-x] )); then
  print -r "Integer expected after -x: $opts[-x]" >&2
  return 1
fi

[[ $0 = fned ]] && fun=1
(( bind )) && okargs=0

if (( $# != okargs )); then
    echo 'Usage:
zed filename
zed -f [ -x N ] function
zed -b' >&2
    return 1
fi

local curcontext=zed:::

# Matching used in zstyle -m: hide result from caller.
# Variables not used directly here.
local -a match mbegin mend
zstyle -m ":completion:zed:*" insert-tab '*' ||
    zstyle ":completion:zed:*" insert-tab yes

zmodload zsh/terminfo 2>/dev/null

__zed_pg_up()
{
    integer count=$(( LINES / 2 - 1 ))
    while (( count -- )); do
        zle up-line
    done
}

__zed_pg_down()
{
    integer count=$(( LINES / 2 - 1 ))
    while (( count -- )); do
        zle down-line
    done
}

if (( bind )) || ! bindkey -M zed >&/dev/null; then
  # Make the zed keymap a copy of the current main.
  bindkey -N zed main
  # Save the current main.  In zle widgets called from
  # zed we may want to set this temporally.
  bindkey -A main zed-normal-keymap

  # Assign some default keys.
  # Depending on your stty's, you may be able to use ^J as accept-line, else:

  # The following isn't useful if we are copying viins, but that's
  # a nicety.
  bindkey -M zed '^x^w' accept-line
  bindkey -M zed '^M' self-insert-unmeta

  zle -N __zed_pg_up
  zle -N __zed_pg_down
  [[ ${+terminfo} = 1 && -n "$terminfo[kpp]" ]] && bindkey -M zed "$terminfo[kpp]" __zed_pg_up
  [[ ${+terminfo} = 1 && -n "$terminfo[knp]" ]] && bindkey -M zed "$terminfo[knp]" __zed_pg_down

  # Make zed-set-file-name available.
  # Assume it's in fpath; there's no error at this point if it isn't
  autoload -Uz zed-set-file-name
  zle -N zed-set-file-name
fi
if (( bind )) || ! bindkey -M zed-vicmd >&/dev/null; then
  bindkey -N zed-vicmd vicmd

  bindkey -M zed-vicmd "ZZ" accept-line
fi

(( bind )) && return 0

# don't mangle !'s
setopt localoptions nobanghist

if ((fun)) then
  var="$(functions $expand -- $1)"
  # If function is undefined but autoloadable, load it
  if [[ $var = *\#\ undefined* ]] then
    var="$(autoload +X $1; functions -- $1)"
  elif [[ -z $var ]] then
    var="${(q-)1} () {
}"
  fi
  vared -M zed -m zed-vicmd var && eval function "$var"
else
  zed_file_name=$1
  [[ -f $1 ]] && var="$(<$1)"
  while vared -M zed -m zed-vicmd var
  do
    {
      print -r -- "$var" >| $zed_file_name
    } always {
      (( TRY_BLOCK_ERROR = 0 ))
    } && break
    echo -n -e '\a'
  done
fi

return 0

# End of zed
